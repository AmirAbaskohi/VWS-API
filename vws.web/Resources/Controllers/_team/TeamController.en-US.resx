<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Created new invite link by {0} with guid {1}." xml:space="preserve">
    <value>Created new invite link by {0} with guid {1}.</value>
  </data>
  <data name="Error in writing files." xml:space="preserve">
    <value>Error in writing files.</value>
  </data>
  <data name="File extension is not allowed." xml:space="preserve">
    <value>File extension is not allowed.</value>
  </data>
  <data name="File size is not allowed." xml:space="preserve">
    <value>File size is not allowed.</value>
  </data>
  <data name="High" xml:space="preserve">
    <value>High</value>
  </data>
  <data name="Invalid emails." xml:space="preserve">
    <value>Invalid emails.</value>
  </data>
  <data name="Invalid users." xml:space="preserve">
    <value>Invalid users.</value>
  </data>
  <data name="Invite link with id {0} revoked by {1}." xml:space="preserve">
    <value>Invite link with id {0} revoked by {1}.</value>
  </data>
  <data name="Length of color is more than 6 characters." xml:space="preserve">
    <value>Length of color is more than 6 characters.</value>
  </data>
  <data name="Length of description is more than 2000 characters." xml:space="preserve">
    <value>Length of description is more than 2000 characters.</value>
  </data>
  <data name="Length of title is more than 500 characters." xml:space="preserve">
    <value>Length of title is more than 500 characters.</value>
  </data>
  <data name="Link does not exist." xml:space="preserve">
    <value>Link does not exist.</value>
  </data>
  <data name="Link is not valid" xml:space="preserve">
    <value>Link is not valid</value>
  </data>
  <data name="Low" xml:space="preserve">
    <value>Low</value>
  </data>
  <data name="Medium" xml:space="preserve">
    <value>Medium</value>
  </data>
  <data name="Member not found." xml:space="preserve">
    <value>Member not found.</value>
  </data>
  <data name="No Time" xml:space="preserve">
    <value>No Time</value>
  </data>
  <data name="Personal" xml:space="preserve">
    <value>Personal</value>
  </data>
  <data name="Task {0} created by {1} under this team." xml:space="preserve">
    <value>Task {0} created by {1} under this team.</value>
  </data>
  <data name="Team color updated from {0} to {1} by {2}." xml:space="preserve">
    <value>Team color updated from {0} to {1} by {2}.</value>
  </data>
  <data name="Team created by {0}." xml:space="preserve">
    <value>Team created by {0}.</value>
  </data>
  <data name="Team description updated to {0} by {1}." xml:space="preserve">
    <value>Team description updated to {0} by {1}.</value>
  </data>
  <data name="Team image updated to {0} by {1}." xml:space="preserve">
    <value>Team image updated to {0} by {1}.</value>
  </data>
  <data name="Team name can not be empty and should have less than 500 characters." xml:space="preserve">
    <value>Team name can not be empty and should have less than 500 characters.</value>
  </data>
  <data name="Team name updated from {0} to {1} by {2}." xml:space="preserve">
    <value>Team name updated from {0} to {1} by {2}.</value>
  </data>
  <data name="Team {0} created by {1}." xml:space="preserve">
    <value>Team {0} created by {1}.</value>
  </data>
  <data name="There is more than one file." xml:space="preserve">
    <value>There is more than one file.</value>
  </data>
  <data name="There is no such file." xml:space="preserve">
    <value>There is no such file.</value>
  </data>
  <data name="There is no team with given Id." xml:space="preserve">
    <value>There is no team with given Id.</value>
  </data>
  <data name="You are a member of a team with that name." xml:space="preserve">
    <value>You are a member of a team with that name.</value>
  </data>
  <data name="You are already joined the team." xml:space="preserve">
    <value>You are already joined the team.</value>
  </data>
  <data name="You are not a member of team." xml:space="preserve">
    <value>You are not a member of team.</value>
  </data>
  <data name="You did not upload an image." xml:space="preserve">
    <value>You did not upload an image.</value>
  </data>
  <data name="You don't have access to this team." xml:space="preserve">
    <value>You don't have access to this team.</value>
  </data>
  <data name="Your file does not have extension." xml:space="preserve">
    <value>Your file does not have extension.</value>
  </data>
  <data name="{0} added {1} to team." xml:space="preserve">
    <value>{0} added {1} to team.</value>
  </data>
  <data name="{0} created new invite link with id {1}." xml:space="preserve">
    <value>{0} created new invite link with id {1}.</value>
  </data>
  <data name="{0} joined the group using {1} invite link." xml:space="preserve">
    <value>{0} joined the group using {1} invite link.</value>
  </data>
  <data name="{0} joined the team using invite link with guid {1}." xml:space="preserve">
    <value>{0} joined the team using invite link with guid {1}.</value>
  </data>
  <data name="{0} removed {1} from team." xml:space="preserve">
    <value>{0} removed {1} from team.</value>
  </data>
  <data name="{0} updated team image." xml:space="preserve">
    <value>{0} updated team image.</value>
  </data>
</root>