<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Department's image updated to {0} by {1}." xml:space="preserve">
    <value>Department's image updated to {0} by {1}.</value>
  </data>
  <data name="Error in writing files." xml:space="preserve">
    <value>Error in writing files.</value>
  </data>
  <data name="File extension is not allowed." xml:space="preserve">
    <value>File extension is not allowed.</value>
  </data>
  <data name="File size is not allowed." xml:space="preserve">
    <value>File size is not allowed.</value>
  </data>
  <data name="Image must be square." xml:space="preserve">
    <value>Image must be square.</value>
  </data>
  <data name="Invalid department users." xml:space="preserve">
    <value>Invalid department users.</value>
  </data>
  <data name="Invalid file." xml:space="preserve">
    <value>Invalid file.</value>
  </data>
  <data name="Invalid team users." xml:space="preserve">
    <value>Invalid team users.</value>
  </data>
  <data name="Invalid users to add to department." xml:space="preserve">
    <value>Invalid users to add to department.</value>
  </data>
  <data name="Length of color is more than 6 characters." xml:space="preserve">
    <value>Length of color is more than 6 characters.</value>
  </data>
  <data name="Length of description is more than 2000 characters." xml:space="preserve">
    <value>Length of description is more than 2000 characters.</value>
  </data>
  <data name="Length of name is more than 500 characters." xml:space="preserve">
    <value>Length of name is more than 500 characters.</value>
  </data>
  <data name="Name can not be empty or have more than 500 characters." xml:space="preserve">
    <value>Name can not be empty or have more than 500 characters.</value>
  </data>
  <data name="Selected user is not member of given department." xml:space="preserve">
    <value>Selected user is not member of given department.</value>
  </data>
  <data name="There is already a department with given name, in given team." xml:space="preserve">
    <value>There is already a department with given name, in given team.</value>
  </data>
  <data name="There is more than one file." xml:space="preserve">
    <value>There is more than one file.</value>
  </data>
  <data name="There is no department with such id." xml:space="preserve">
    <value>There is no department with such id.</value>
  </data>
  <data name="There is no such file." xml:space="preserve">
    <value>There is no such file.</value>
  </data>
  <data name="There is no team with such id." xml:space="preserve">
    <value>There is no team with such id.</value>
  </data>
  <data name="There is no user with given Id." xml:space="preserve">
    <value>There is no user with given Id.</value>
  </data>
  <data name="There is no user with such id." xml:space="preserve">
    <value>There is no user with such id.</value>
  </data>
  <data name="User you want to add, is already a member of selected department." xml:space="preserve">
    <value>User you want to add, is already a member of selected department.</value>
  </data>
  <data name="User you want to to add, is not a member of selected team." xml:space="preserve">
    <value>User you want to to add, is not a member of selected team.</value>
  </data>
  <data name="You are not member of given department." xml:space="preserve">
    <value>You are not member of given department.</value>
  </data>
  <data name="You are not member of team." xml:space="preserve">
    <value>You are not member of team.</value>
  </data>
  <data name="You did not upload an image." xml:space="preserve">
    <value>You did not upload an image.</value>
  </data>
  <data name="Your file does not have extension." xml:space="preserve">
    <value>Your file does not have extension.</value>
  </data>
  <data name="{0} added {1} to department." xml:space="preserve">
    <value>{0} added {1} to department.</value>
  </data>
  <data name="{0} deleted {1} department." xml:space="preserve">
    <value>{0} deleted {1} department.</value>
  </data>
  <data name="{0} department created by {1} under {2} team." xml:space="preserve">
    <value>{0} department created by {1} under {2} team.</value>
  </data>
  <data name="{0} removed {1} from department." xml:space="preserve">
    <value>{0} removed {1} from department.</value>
  </data>
  <data name="{0} updated department's color from {1} to {2}." xml:space="preserve">
    <value>{0} updated department's color from {1} to {2}.</value>
  </data>
  <data name="{0} updated department's description from {1} to {2}." xml:space="preserve">
    <value>{0} updated department's description from {1} to {2}.</value>
  </data>
  <data name="{0} updated department's name from {1} to {2}." xml:space="preserve">
    <value>{0} updated department's name from {1} to {2}.</value>
  </data>
  <data name="{0} updated department's team from {1} to {2}." xml:space="preserve">
    <value>{0} updated department's team from {1} to {2}.</value>
  </data>
</root>