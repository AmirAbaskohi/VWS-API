// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using vws.web.Domain;

namespace vws.web.Migrations
{
    [DbContext(typeof(VWS_DbContext))]
    [Migration("20210623172426_UpdatedNameForPausedTmeTackSpentTie")]
    partial class UpdatedNameForPausedTmeTackSpentTie
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseIdentityColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.3");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("vws.web.Domain.ActivityParameterType", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ActivityParameterType");
                });

            modelBuilder.Entity("vws.web.Domain._base.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("EmailVerificationCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EmailVerificationSendTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ResetPasswordCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ResetPasswordCodeIsValid")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ResetPasswordSendTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("vws.web.Domain._base.Culture", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("CultureAbbreviation")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Base_Culture");
                });

            modelBuilder.Entity("vws.web.Domain._base.RefreshToken", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<bool>("IsValid")
                        .HasColumnType("bit");

                    b.Property<string>("Token")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Base_RefreshToken");
                });

            modelBuilder.Entity("vws.web.Domain._base.UserProfile", b =>
                {
                    b.Property<Guid>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<byte?>("CultureId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("NickName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("NickNameSecurityStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProfileImageGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ProfileImageId")
                        .HasColumnType("int");

                    b.Property<Guid>("ProfileImageSecurityStamp")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ThemeColorCode")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.HasKey("UserId");

                    b.HasIndex("CultureId");

                    b.HasIndex("ProfileImageId");

                    b.ToTable("Base_UserProfile");
                });

            modelBuilder.Entity("vws.web.Domain._base.UsersActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TargetUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("TargetUserId");

                    b.ToTable("Base_UsersActivity");
                });

            modelBuilder.Entity("vws.web.Domain._base.UsersOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TargetUserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("OwnerUserId");

                    b.HasIndex("TargetUserId");

                    b.ToTable("Base_UsersOrder");
                });

            modelBuilder.Entity("vws.web.Domain._calendar.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2500)
                        .HasColumnType("nvarchar(2500)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAllDay")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Calendar_Event");
                });

            modelBuilder.Entity("vws.web.Domain._calendar.EventHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("EventBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EventTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("Calendar_EventHistory");
                });

            modelBuilder.Entity("vws.web.Domain._calendar.EventHistoryParameter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<byte>("ActivityParameterTypeId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("EventHistoryId")
                        .HasColumnType("bigint");

                    b.Property<bool>("ShouldBeLocalized")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ActivityParameterTypeId");

                    b.HasIndex("EventHistoryId");

                    b.ToTable("Calendar_EventHistoryParameter");
                });

            modelBuilder.Entity("vws.web.Domain._calendar.EventMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Calendar_EventMember");
                });

            modelBuilder.Entity("vws.web.Domain._calendar.EventProject", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.HasKey("ProjectId", "EventId");

                    b.HasIndex("EventId");

                    b.ToTable("Calendar_EventProject");
                });

            modelBuilder.Entity("vws.web.Domain._chat.ChannelTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("ChannelTypeId")
                        .HasColumnType("tinyint");

                    b.Property<DateTime>("LastTransactionDateTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Channel_ChannelTransaction");
                });

            modelBuilder.Entity("vws.web.Domain._chat.ChannelType", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Chat_ChannelType");
                });

            modelBuilder.Entity("vws.web.Domain._chat.Message", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Body")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("ChannelTypeId")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("FromUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEdited")
                        .HasColumnType("bit");

                    b.Property<bool>("IsPinned")
                        .HasColumnType("bit");

                    b.Property<byte>("MessageTypeId")
                        .HasColumnType("tinyint");

                    b.Property<int?>("PinEvenOrder")
                        .HasColumnType("int");

                    b.Property<long?>("ReplyTo")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SendOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ChannelTypeId");

                    b.HasIndex("MessageTypeId");

                    b.ToTable("Chat_Message");
                });

            modelBuilder.Entity("vws.web.Domain._chat.MessageDeliver", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("ChannelTypeId")
                        .HasColumnType("tinyint");

                    b.Property<long>("MessageId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ReadBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("Chat_MessageDeliver");
                });

            modelBuilder.Entity("vws.web.Domain._chat.MessageEdit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("ChannelTypeId")
                        .HasColumnType("tinyint");

                    b.Property<long>("MessageId")
                        .HasColumnType("bigint");

                    b.Property<string>("NewBody")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("OldBody")
                        .HasMaxLength(4000)
                        .HasColumnType("nvarchar(4000)");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Chat_MessageEdit");
                });

            modelBuilder.Entity("vws.web.Domain._chat.MessageRead", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("ChannelTypeId")
                        .HasColumnType("tinyint");

                    b.Property<long>("MessageId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("ReadBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MessageId");

                    b.ToTable("Chat_MessageRead");
                });

            modelBuilder.Entity("vws.web.Domain._chat.MessageType", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.HasKey("Id");

                    b.ToTable("Chat_MessageType");
                });

            modelBuilder.Entity("vws.web.Domain._chat.MutedChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("ChannelTypeId")
                        .HasColumnType("tinyint");

                    b.Property<bool>("ForEver")
                        .HasColumnType("bit");

                    b.Property<bool>("IsMuted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("MuteUntil")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Chat_MutedChannel");
                });

            modelBuilder.Entity("vws.web.Domain._chat.PinnedChannel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<Guid>("ChannelId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<byte>("ChannelTypeId")
                        .HasColumnType("tinyint");

                    b.Property<int>("EvenOrder")
                        .HasColumnType("int");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("Chat_PinnedChannel");
                });

            modelBuilder.Entity("vws.web.Domain._department.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Color")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DepartmentImageGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("DepartmentImageId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentImageId");

                    b.HasIndex("TeamId");

                    b.ToTable("Department_Department");
                });

            modelBuilder.Entity("vws.web.Domain._department.DepartmentHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("EventBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EventTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Department_DepartmentHistory");
                });

            modelBuilder.Entity("vws.web.Domain._department.DepartmentHistoryParameter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<byte>("ActivityParameterTypeId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("DepartmentHistoryId")
                        .HasColumnType("bigint");

                    b.Property<bool>("ShouldBeLocalized")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ActivityParameterTypeId");

                    b.HasIndex("DepartmentHistoryId");

                    b.ToTable("Department_DepartmentHistoryParameter");
                });

            modelBuilder.Entity("vws.web.Domain._department.DepartmentMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Department_DepartmentMember");
                });

            modelBuilder.Entity("vws.web.Domain._feedback.FeedBack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<Guid?>("AttachmentGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("AttachmentId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("Title")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AttachmentId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("FeedBack_FeedBack");
                });

            modelBuilder.Entity("vws.web.Domain._file.File", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("FileContainerGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("FileContainerId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("Size")
                        .HasColumnType("bigint");

                    b.Property<Guid>("UploadedBy")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FileContainerId");

                    b.ToTable("File_File");
                });

            modelBuilder.Entity("vws.web.Domain._file.FileContainer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("RecentFileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("File_FileContainer");
                });

            modelBuilder.Entity("vws.web.Domain._notification.Notification", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("ActivityId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsReceived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSeen")
                        .HasColumnType("bit");

                    b.Property<byte>("NotificationTypeId")
                        .HasColumnType("tinyint");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NotificationTypeId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Notification_Notification");
                });

            modelBuilder.Entity("vws.web.Domain._notification.NotificationType", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Notification_NotificationType");
                });

            modelBuilder.Entity("vws.web.Domain._project.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Color")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("ProjectImageGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("ProjectImageId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("StatusId")
                        .HasColumnType("tinyint");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectImageId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TeamId");

                    b.ToTable("Project_Project");
                });

            modelBuilder.Entity("vws.web.Domain._project.ProjectDepartment", b =>
                {
                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int>("DepartmentId")
                        .HasColumnType("int");

                    b.HasKey("ProjectId", "DepartmentId");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Project_ProjectDepartment");
                });

            modelBuilder.Entity("vws.web.Domain._project.ProjectHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("EventBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EventTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.ToTable("Project_ProjectHistory");
                });

            modelBuilder.Entity("vws.web.Domain._project.ProjectHistoryParameter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<byte>("ActivityParameterTypeId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProjectHistoryId")
                        .HasColumnType("bigint");

                    b.Property<bool>("ShouldBeLocalized")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("ActivityParameterTypeId");

                    b.HasIndex("ProjectHistoryId");

                    b.ToTable("Project_ProjectHistoryParameter");
                });

            modelBuilder.Entity("vws.web.Domain._project.ProjectMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsPermittedByCreator")
                        .HasColumnType("bit");

                    b.Property<DateTime>("PermittedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Project_ProjectMember");
                });

            modelBuilder.Entity("vws.web.Domain._project.ProjectStatus", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("Project_Status");
                });

            modelBuilder.Entity("vws.web.Domain._project.UserProjectActivity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Project_UserProjectActivity");
                });

            modelBuilder.Entity("vws.web.Domain._project.UserProjectOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Project_UserProjectOrder");
                });

            modelBuilder.Entity("vws.web.Domain._task.GeneralTask", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUrgent")
                        .HasColumnType("bit");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<byte>("TaskPriorityId")
                        .HasColumnType("tinyint");

                    b.Property<byte?>("TaskScheduleTypeId")
                        .HasColumnType("tinyint");

                    b.Property<int>("TaskStatusId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TaskPriorityId");

                    b.HasIndex("TaskScheduleTypeId");

                    b.HasIndex("TaskStatusId");

                    b.HasIndex("TeamId");

                    b.ToTable("Task_GeneralTask");
                });

            modelBuilder.Entity("vws.web.Domain._task.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Color")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Task_Tag");
                });

            modelBuilder.Entity("vws.web.Domain._task.TaskAssign", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DeletedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("GeneralTaskId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GeneralTaskId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Task_TaskAssign");
                });

            modelBuilder.Entity("vws.web.Domain._task.TaskAttachment", b =>
                {
                    b.Property<int>("FileContainerId")
                        .HasColumnType("int");

                    b.Property<long>("GeneralTaskId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("FileContainerGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FileContainerId", "GeneralTaskId");

                    b.HasIndex("GeneralTaskId");

                    b.ToTable("Task_TaskAttachment");
                });

            modelBuilder.Entity("vws.web.Domain._task.TaskCheckList", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("GeneralTaskId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.HasIndex("GeneralTaskId");

                    b.ToTable("Task_TaskCheckList");
                });

            modelBuilder.Entity("vws.web.Domain._task.TaskCheckListItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsChecked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("TaskCheckListId")
                        .HasColumnType("bigint");

                    b.Property<string>("Title")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("TaskCheckListId");

                    b.ToTable("Task_TaskCheckListItem");
                });

            modelBuilder.Entity("vws.web.Domain._task.TaskComment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("Body")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<Guid>("CommentedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CommentedOn")
                        .HasColumnType("datetime2");

                    b.Property<long>("GeneralTaskId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("GeneralTaskId");

                    b.ToTable("Task_TaskComment");
                });

            modelBuilder.Entity("vws.web.Domain._task.TaskCommentAttachment", b =>
                {
                    b.Property<int>("FileContainerId")
                        .HasColumnType("int");

                    b.Property<long>("TaskCommentId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("FileContainerGuid")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("FileContainerId", "TaskCommentId");

                    b.HasIndex("TaskCommentId");

                    b.ToTable("Task_TaskCommentAttachment");
                });

            modelBuilder.Entity("vws.web.Domain._task.TaskCommentTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Name")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.HasKey("Id");

                    b.ToTable("Task_TaskCommentTemplate");
                });

            modelBuilder.Entity("vws.web.Domain._task.TaskHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("EventBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EventTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("GeneralTaskId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GeneralTaskId");

                    b.ToTable("Task_TaskHistory");
                });

            modelBuilder.Entity("vws.web.Domain._task.TaskHistoryParameter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<byte>("ActivityParameterTypeId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShouldBeLocalized")
                        .HasColumnType("bit");

                    b.Property<long>("TaskHistoryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ActivityParameterTypeId");

                    b.HasIndex("TaskHistoryId");

                    b.ToTable("Task_TaskHistoryParameter");
                });

            modelBuilder.Entity("vws.web.Domain._task.TaskPriority", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Task_TaskPriority");
                });

            modelBuilder.Entity("vws.web.Domain._task.TaskReminder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<long>("GeneralTaskId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("GeneralTaskId");

                    b.ToTable("Task_TaskReminder");
                });

            modelBuilder.Entity("vws.web.Domain._task.TaskReminderLinkedUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<Guid>("RemindUserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("TaskReminderId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("RemindUserId");

                    b.HasIndex("TaskReminderId");

                    b.ToTable("Task_TaskReminderLinkedUser");
                });

            modelBuilder.Entity("vws.web.Domain._task.TaskScheduleType", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("Task_TaskScheduleType");
                });

            modelBuilder.Entity("vws.web.Domain._task.TaskStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("EvenOrder")
                        .HasColumnType("int");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<int?>("TeamId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Task_TaskStatus");
                });

            modelBuilder.Entity("vws.web.Domain._task.TaskStatusHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<Guid>("ChangeById")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("GeneralTaskId")
                        .HasColumnType("bigint");

                    b.Property<int>("LastStatusId")
                        .HasColumnType("int");

                    b.Property<int>("NewStatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ChangeById");

                    b.HasIndex("GeneralTaskId");

                    b.HasIndex("LastStatusId");

                    b.HasIndex("NewStatusId");

                    b.ToTable("Task_TaskStatusHistory");
                });

            modelBuilder.Entity("vws.web.Domain._task.TaskTag", b =>
                {
                    b.Property<int>("TagId")
                        .HasColumnType("int");

                    b.Property<long>("GeneralTaskId")
                        .HasColumnType("bigint");

                    b.HasKey("TagId", "GeneralTaskId");

                    b.HasIndex("GeneralTaskId");

                    b.ToTable("Task_TaskTag");
                });

            modelBuilder.Entity("vws.web.Domain._task.TimeTrack", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("GeneralTaskId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<double?>("TotalTimeInMinutes")
                        .HasColumnType("float");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GeneralTaskId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Task_TimeTrack");
                });

            modelBuilder.Entity("vws.web.Domain._task.TimeTrackPause", b =>
                {
                    b.Property<long>("TimeTrackId")
                        .HasColumnType("bigint");

                    b.Property<long>("GeneralTaskId")
                        .HasColumnType("bigint");

                    b.Property<double>("TotalTimeInMinutes")
                        .HasColumnType("float");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TimeTrackId");

                    b.HasIndex("GeneralTaskId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Task_TimeTrackPause");
                });

            modelBuilder.Entity("vws.web.Domain._task.TimeTrackPausedSpentTime", b =>
                {
                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("GeneralTaskId")
                        .HasColumnType("bigint");

                    b.Property<double>("TotalTimeInMinutes")
                        .HasColumnType("float");

                    b.HasKey("UserProfileId", "GeneralTaskId");

                    b.HasIndex("GeneralTaskId");

                    b.ToTable("Task_TimeTrackPausedSpentTime");
                });

            modelBuilder.Entity("vws.web.Domain._team.Team", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("Color")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("nvarchar(2000)");

                    b.Property<Guid>("Guid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("TeamImageGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("TeamImageId")
                        .HasColumnType("int");

                    b.Property<byte>("TeamTypeId")
                        .HasColumnType("tinyint");

                    b.HasKey("Id");

                    b.HasIndex("TeamImageId");

                    b.HasIndex("TeamTypeId");

                    b.ToTable("Team_Team");
                });

            modelBuilder.Entity("vws.web.Domain._team.TeamHistory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<string>("EventBody")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EventTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Team_TeamHistory");
                });

            modelBuilder.Entity("vws.web.Domain._team.TeamHistoryParameter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<byte>("ActivityParameterTypeId")
                        .HasColumnType("tinyint");

                    b.Property<string>("Body")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShouldBeLocalized")
                        .HasColumnType("bit");

                    b.Property<long>("TeamHistoryId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ActivityParameterTypeId");

                    b.HasIndex("TeamHistoryId");

                    b.ToTable("Team_TeamHistoryParameter");
                });

            modelBuilder.Entity("vws.web.Domain._team.TeamInviteLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<Guid>("LinkGuid")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ModifiedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.ToTable("Team_TeamInviteLink");
                });

            modelBuilder.Entity("vws.web.Domain._team.TeamMember", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedOn")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Team_TeamMember");
                });

            modelBuilder.Entity("vws.web.Domain._team.TeamType", b =>
                {
                    b.Property<byte>("Id")
                        .HasColumnType("tinyint");

                    b.Property<string>("Name")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.HasKey("Id");

                    b.ToTable("Team_TeamType");
                });

            modelBuilder.Entity("vws.web.Domain._team.UserTeamActivity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .UseIdentityColumn();

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Team_UserTeamActivity");
                });

            modelBuilder.Entity("vws.web.Domain._team.UserTeamOrder", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("TeamId")
                        .HasColumnType("int");

                    b.Property<Guid>("UserProfileId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("TeamId");

                    b.HasIndex("UserProfileId");

                    b.ToTable("Team_UserTeamOrder");
                });

            modelBuilder.Entity("vws.web.Domain._version.Version", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<int>("Name")
                        .HasColumnType("int");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Version_Version");
                });

            modelBuilder.Entity("vws.web.Domain._version.VersionLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .UseIdentityColumn();

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Log")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Order")
                        .HasColumnType("int");

                    b.Property<int>("VersionId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("VersionId");

                    b.ToTable("Version_VersionLog");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("vws.web.Domain._base.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("vws.web.Domain._base.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vws.web.Domain._base.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("vws.web.Domain._base.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("vws.web.Domain._base.UserProfile", b =>
                {
                    b.HasOne("vws.web.Domain._base.Culture", "Culture")
                        .WithMany()
                        .HasForeignKey("CultureId");

                    b.HasOne("vws.web.Domain._file.FileContainer", "ProfileImage")
                        .WithMany()
                        .HasForeignKey("ProfileImageId");

                    b.Navigation("Culture");

                    b.Navigation("ProfileImage");
                });

            modelBuilder.Entity("vws.web.Domain._base.UsersActivity", b =>
                {
                    b.HasOne("vws.web.Domain._base.UserProfile", "OwnerUser")
                        .WithMany()
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vws.web.Domain._base.UserProfile", "TagetUser")
                        .WithMany()
                        .HasForeignKey("TargetUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OwnerUser");

                    b.Navigation("TagetUser");
                });

            modelBuilder.Entity("vws.web.Domain._base.UsersOrder", b =>
                {
                    b.HasOne("vws.web.Domain._base.UserProfile", "OwnerUser")
                        .WithMany()
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vws.web.Domain._base.UserProfile", "TagetUser")
                        .WithMany()
                        .HasForeignKey("TargetUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OwnerUser");

                    b.Navigation("TagetUser");
                });

            modelBuilder.Entity("vws.web.Domain._calendar.Event", b =>
                {
                    b.HasOne("vws.web.Domain._team.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("vws.web.Domain._calendar.EventHistory", b =>
                {
                    b.HasOne("vws.web.Domain._calendar.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("vws.web.Domain._calendar.EventHistoryParameter", b =>
                {
                    b.HasOne("vws.web.Domain.ActivityParameterType", "ActivityParameterType")
                        .WithMany()
                        .HasForeignKey("ActivityParameterTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vws.web.Domain._calendar.EventHistory", "EventHistory")
                        .WithMany("EventHistoryParameters")
                        .HasForeignKey("EventHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityParameterType");

                    b.Navigation("EventHistory");
                });

            modelBuilder.Entity("vws.web.Domain._calendar.EventMember", b =>
                {
                    b.HasOne("vws.web.Domain._calendar.Event", "Event")
                        .WithMany("EventUsers")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vws.web.Domain._base.UserProfile", "UserProfile")
                        .WithMany("EventUsers")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("vws.web.Domain._calendar.EventProject", b =>
                {
                    b.HasOne("vws.web.Domain._calendar.Event", "Event")
                        .WithMany("EventProjects")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vws.web.Domain._project.Project", "Project")
                        .WithMany("EventProjects")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("vws.web.Domain._chat.Message", b =>
                {
                    b.HasOne("vws.web.Domain._chat.ChannelType", "ChannelType")
                        .WithMany("Messages")
                        .HasForeignKey("ChannelTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vws.web.Domain._chat.MessageType", "MessageType")
                        .WithMany("Messages")
                        .HasForeignKey("MessageTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChannelType");

                    b.Navigation("MessageType");
                });

            modelBuilder.Entity("vws.web.Domain._chat.MessageDeliver", b =>
                {
                    b.HasOne("vws.web.Domain._chat.Message", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("vws.web.Domain._chat.MessageEdit", b =>
                {
                    b.HasOne("vws.web.Domain._chat.Message", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vws.web.Domain._base.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("vws.web.Domain._chat.MessageRead", b =>
                {
                    b.HasOne("vws.web.Domain._chat.Message", "Message")
                        .WithMany()
                        .HasForeignKey("MessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Message");
                });

            modelBuilder.Entity("vws.web.Domain._department.Department", b =>
                {
                    b.HasOne("vws.web.Domain._file.FileContainer", "DepartmentImage")
                        .WithMany()
                        .HasForeignKey("DepartmentImageId");

                    b.HasOne("vws.web.Domain._team.Team", "Team")
                        .WithMany("Departments")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DepartmentImage");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("vws.web.Domain._department.DepartmentHistory", b =>
                {
                    b.HasOne("vws.web.Domain._department.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");
                });

            modelBuilder.Entity("vws.web.Domain._department.DepartmentHistoryParameter", b =>
                {
                    b.HasOne("vws.web.Domain.ActivityParameterType", "ActivityParameterType")
                        .WithMany()
                        .HasForeignKey("ActivityParameterTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vws.web.Domain._department.DepartmentHistory", "DepartmentHistory")
                        .WithMany("DepartmentHistoriesarameters")
                        .HasForeignKey("DepartmentHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityParameterType");

                    b.Navigation("DepartmentHistory");
                });

            modelBuilder.Entity("vws.web.Domain._department.DepartmentMember", b =>
                {
                    b.HasOne("vws.web.Domain._department.Department", "Department")
                        .WithMany("DepartmentMembers")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vws.web.Domain._base.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("vws.web.Domain._feedback.FeedBack", b =>
                {
                    b.HasOne("vws.web.Domain._file.FileContainer", "FileContainer")
                        .WithMany()
                        .HasForeignKey("AttachmentId");

                    b.HasOne("vws.web.Domain._base.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileContainer");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("vws.web.Domain._file.File", b =>
                {
                    b.HasOne("vws.web.Domain._file.FileContainer", "FileContainer")
                        .WithMany("Files")
                        .HasForeignKey("FileContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileContainer");
                });

            modelBuilder.Entity("vws.web.Domain._notification.Notification", b =>
                {
                    b.HasOne("vws.web.Domain._notification.NotificationType", "NotificationType")
                        .WithMany()
                        .HasForeignKey("NotificationTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vws.web.Domain._base.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("NotificationType");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("vws.web.Domain._project.Project", b =>
                {
                    b.HasOne("vws.web.Domain._file.FileContainer", "ProjectImage")
                        .WithMany()
                        .HasForeignKey("ProjectImageId");

                    b.HasOne("vws.web.Domain._project.ProjectStatus", "Status")
                        .WithMany("Projects")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vws.web.Domain._team.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.Navigation("ProjectImage");

                    b.Navigation("Status");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("vws.web.Domain._project.ProjectDepartment", b =>
                {
                    b.HasOne("vws.web.Domain._department.Department", "Department")
                        .WithMany("ProjectDepartments")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vws.web.Domain._project.Project", "Project")
                        .WithMany("ProjectDepartments")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Department");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("vws.web.Domain._project.ProjectHistory", b =>
                {
                    b.HasOne("vws.web.Domain._project.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("vws.web.Domain._project.ProjectHistoryParameter", b =>
                {
                    b.HasOne("vws.web.Domain.ActivityParameterType", "ActivityParameterType")
                        .WithMany()
                        .HasForeignKey("ActivityParameterTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vws.web.Domain._project.ProjectHistory", "ProjectHistory")
                        .WithMany("ProjectHistoryParameters")
                        .HasForeignKey("ProjectHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityParameterType");

                    b.Navigation("ProjectHistory");
                });

            modelBuilder.Entity("vws.web.Domain._project.ProjectMember", b =>
                {
                    b.HasOne("vws.web.Domain._project.Project", "Project")
                        .WithMany("ProjectMembers")
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vws.web.Domain._base.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("vws.web.Domain._project.UserProjectActivity", b =>
                {
                    b.HasOne("vws.web.Domain._project.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vws.web.Domain._base.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("vws.web.Domain._project.UserProjectOrder", b =>
                {
                    b.HasOne("vws.web.Domain._project.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vws.web.Domain._base.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("vws.web.Domain._task.GeneralTask", b =>
                {
                    b.HasOne("vws.web.Domain._project.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId");

                    b.HasOne("vws.web.Domain._task.TaskPriority", "TaskPriority")
                        .WithMany()
                        .HasForeignKey("TaskPriorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vws.web.Domain._task.TaskScheduleType", "TaskScheduleType")
                        .WithMany("GeneralTasks")
                        .HasForeignKey("TaskScheduleTypeId");

                    b.HasOne("vws.web.Domain._task.TaskStatus", "Status")
                        .WithMany()
                        .HasForeignKey("TaskStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vws.web.Domain._team.Team", "Team")
                        .WithMany("Tasks")
                        .HasForeignKey("TeamId");

                    b.Navigation("Project");

                    b.Navigation("Status");

                    b.Navigation("TaskPriority");

                    b.Navigation("TaskScheduleType");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("vws.web.Domain._task.Tag", b =>
                {
                    b.HasOne("vws.web.Domain._project.Project", "Project")
                        .WithMany()
                        .HasForeignKey("ProjectId");

                    b.HasOne("vws.web.Domain._team.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId");

                    b.HasOne("vws.web.Domain._base.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId");

                    b.Navigation("Project");

                    b.Navigation("Team");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("vws.web.Domain._task.TaskAssign", b =>
                {
                    b.HasOne("vws.web.Domain._task.GeneralTask", "GeneralTask")
                        .WithMany("TaskAssigns")
                        .HasForeignKey("GeneralTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vws.web.Domain._base.UserProfile", "UserProfile")
                        .WithMany("TaskAssigns")
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeneralTask");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("vws.web.Domain._task.TaskAttachment", b =>
                {
                    b.HasOne("vws.web.Domain._file.FileContainer", "FileContainer")
                        .WithMany()
                        .HasForeignKey("FileContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vws.web.Domain._task.GeneralTask", "GeneralTask")
                        .WithMany("TaskAttachments")
                        .HasForeignKey("GeneralTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileContainer");

                    b.Navigation("GeneralTask");
                });

            modelBuilder.Entity("vws.web.Domain._task.TaskCheckList", b =>
                {
                    b.HasOne("vws.web.Domain._task.GeneralTask", "GeneralTask")
                        .WithMany("TaskChecklist")
                        .HasForeignKey("GeneralTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeneralTask");
                });

            modelBuilder.Entity("vws.web.Domain._task.TaskCheckListItem", b =>
                {
                    b.HasOne("vws.web.Domain._task.TaskCheckList", "TaskCheckList")
                        .WithMany("TaskCheckListItems")
                        .HasForeignKey("TaskCheckListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TaskCheckList");
                });

            modelBuilder.Entity("vws.web.Domain._task.TaskComment", b =>
                {
                    b.HasOne("vws.web.Domain._task.GeneralTask", "GeneralTask")
                        .WithMany("TaskComments")
                        .HasForeignKey("GeneralTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeneralTask");
                });

            modelBuilder.Entity("vws.web.Domain._task.TaskCommentAttachment", b =>
                {
                    b.HasOne("vws.web.Domain._file.FileContainer", "FileContainer")
                        .WithMany()
                        .HasForeignKey("FileContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vws.web.Domain._task.TaskComment", "TaskComment")
                        .WithMany("Attachments")
                        .HasForeignKey("TaskCommentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FileContainer");

                    b.Navigation("TaskComment");
                });

            modelBuilder.Entity("vws.web.Domain._task.TaskHistory", b =>
                {
                    b.HasOne("vws.web.Domain._task.GeneralTask", "GeneralTask")
                        .WithMany()
                        .HasForeignKey("GeneralTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeneralTask");
                });

            modelBuilder.Entity("vws.web.Domain._task.TaskHistoryParameter", b =>
                {
                    b.HasOne("vws.web.Domain.ActivityParameterType", "ActivityParameterType")
                        .WithMany()
                        .HasForeignKey("ActivityParameterTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vws.web.Domain._task.TaskHistory", "TaskHistory")
                        .WithMany("TaskHistoryParameters")
                        .HasForeignKey("TaskHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityParameterType");

                    b.Navigation("TaskHistory");
                });

            modelBuilder.Entity("vws.web.Domain._task.TaskReminder", b =>
                {
                    b.HasOne("vws.web.Domain._task.GeneralTask", "GeneralTask")
                        .WithMany("TaskReminders")
                        .HasForeignKey("GeneralTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeneralTask");
                });

            modelBuilder.Entity("vws.web.Domain._task.TaskReminderLinkedUser", b =>
                {
                    b.HasOne("vws.web.Domain._base.UserProfile", "RemindUser")
                        .WithMany()
                        .HasForeignKey("RemindUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vws.web.Domain._task.TaskReminder", "TaskReminder")
                        .WithMany("TaskReminderLinkedUsers")
                        .HasForeignKey("TaskReminderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RemindUser");

                    b.Navigation("TaskReminder");
                });

            modelBuilder.Entity("vws.web.Domain._task.TaskStatus", b =>
                {
                    b.HasOne("vws.web.Domain._project.Project", "Project")
                        .WithMany("TaskStatuses")
                        .HasForeignKey("ProjectId");

                    b.HasOne("vws.web.Domain._team.Team", "Team")
                        .WithMany("TaskStatuses")
                        .HasForeignKey("TeamId");

                    b.HasOne("vws.web.Domain._base.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId");

                    b.Navigation("Project");

                    b.Navigation("Team");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("vws.web.Domain._task.TaskStatusHistory", b =>
                {
                    b.HasOne("vws.web.Domain._base.UserProfile", "ChangedBy")
                        .WithMany()
                        .HasForeignKey("ChangeById")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vws.web.Domain._task.GeneralTask", "GeneralTask")
                        .WithMany()
                        .HasForeignKey("GeneralTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vws.web.Domain._task.TaskStatus", "LastStatus")
                        .WithMany()
                        .HasForeignKey("LastStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vws.web.Domain._task.TaskStatus", "NewStatus")
                        .WithMany()
                        .HasForeignKey("NewStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChangedBy");

                    b.Navigation("GeneralTask");

                    b.Navigation("LastStatus");

                    b.Navigation("NewStatus");
                });

            modelBuilder.Entity("vws.web.Domain._task.TaskTag", b =>
                {
                    b.HasOne("vws.web.Domain._task.GeneralTask", "GeneralTask")
                        .WithMany("TaskTags")
                        .HasForeignKey("GeneralTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vws.web.Domain._task.Tag", "Tag")
                        .WithMany("TaskTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeneralTask");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("vws.web.Domain._task.TimeTrack", b =>
                {
                    b.HasOne("vws.web.Domain._task.GeneralTask", "GeneralTask")
                        .WithMany()
                        .HasForeignKey("GeneralTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vws.web.Domain._base.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeneralTask");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("vws.web.Domain._task.TimeTrackPause", b =>
                {
                    b.HasOne("vws.web.Domain._task.GeneralTask", "GeneralTask")
                        .WithMany()
                        .HasForeignKey("GeneralTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vws.web.Domain._task.TimeTrack", "TimeTrack")
                        .WithMany("TimeTrackPauses")
                        .HasForeignKey("TimeTrackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vws.web.Domain._base.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeneralTask");

                    b.Navigation("TimeTrack");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("vws.web.Domain._task.TimeTrackPausedSpentTime", b =>
                {
                    b.HasOne("vws.web.Domain._task.GeneralTask", "GeneralTask")
                        .WithMany()
                        .HasForeignKey("GeneralTaskId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vws.web.Domain._base.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeneralTask");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("vws.web.Domain._team.Team", b =>
                {
                    b.HasOne("vws.web.Domain._file.FileContainer", "TeamImage")
                        .WithMany()
                        .HasForeignKey("TeamImageId");

                    b.HasOne("vws.web.Domain._team.TeamType", "TeamType")
                        .WithMany("Teams")
                        .HasForeignKey("TeamTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TeamImage");

                    b.Navigation("TeamType");
                });

            modelBuilder.Entity("vws.web.Domain._team.TeamHistory", b =>
                {
                    b.HasOne("vws.web.Domain._team.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("vws.web.Domain._team.TeamHistoryParameter", b =>
                {
                    b.HasOne("vws.web.Domain.ActivityParameterType", "ActivityParameterType")
                        .WithMany()
                        .HasForeignKey("ActivityParameterTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vws.web.Domain._team.TeamHistory", "TeamHistory")
                        .WithMany("TeamHistoryParameters")
                        .HasForeignKey("TeamHistoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ActivityParameterType");

                    b.Navigation("TeamHistory");
                });

            modelBuilder.Entity("vws.web.Domain._team.TeamInviteLink", b =>
                {
                    b.HasOne("vws.web.Domain._team.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");
                });

            modelBuilder.Entity("vws.web.Domain._team.TeamMember", b =>
                {
                    b.HasOne("vws.web.Domain._team.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vws.web.Domain._base.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("vws.web.Domain._team.UserTeamActivity", b =>
                {
                    b.HasOne("vws.web.Domain._team.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vws.web.Domain._base.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("vws.web.Domain._team.UserTeamOrder", b =>
                {
                    b.HasOne("vws.web.Domain._team.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("vws.web.Domain._base.UserProfile", "UserProfile")
                        .WithMany()
                        .HasForeignKey("UserProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Team");

                    b.Navigation("UserProfile");
                });

            modelBuilder.Entity("vws.web.Domain._version.VersionLog", b =>
                {
                    b.HasOne("vws.web.Domain._version.Version", "Version")
                        .WithMany("VersionLogs")
                        .HasForeignKey("VersionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Version");
                });

            modelBuilder.Entity("vws.web.Domain._base.UserProfile", b =>
                {
                    b.Navigation("EventUsers");

                    b.Navigation("TaskAssigns");
                });

            modelBuilder.Entity("vws.web.Domain._calendar.Event", b =>
                {
                    b.Navigation("EventProjects");

                    b.Navigation("EventUsers");
                });

            modelBuilder.Entity("vws.web.Domain._calendar.EventHistory", b =>
                {
                    b.Navigation("EventHistoryParameters");
                });

            modelBuilder.Entity("vws.web.Domain._chat.ChannelType", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("vws.web.Domain._chat.MessageType", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("vws.web.Domain._department.Department", b =>
                {
                    b.Navigation("DepartmentMembers");

                    b.Navigation("ProjectDepartments");
                });

            modelBuilder.Entity("vws.web.Domain._department.DepartmentHistory", b =>
                {
                    b.Navigation("DepartmentHistoriesarameters");
                });

            modelBuilder.Entity("vws.web.Domain._file.FileContainer", b =>
                {
                    b.Navigation("Files");
                });

            modelBuilder.Entity("vws.web.Domain._project.Project", b =>
                {
                    b.Navigation("EventProjects");

                    b.Navigation("ProjectDepartments");

                    b.Navigation("ProjectMembers");

                    b.Navigation("Tasks");

                    b.Navigation("TaskStatuses");
                });

            modelBuilder.Entity("vws.web.Domain._project.ProjectHistory", b =>
                {
                    b.Navigation("ProjectHistoryParameters");
                });

            modelBuilder.Entity("vws.web.Domain._project.ProjectStatus", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("vws.web.Domain._task.GeneralTask", b =>
                {
                    b.Navigation("TaskAssigns");

                    b.Navigation("TaskAttachments");

                    b.Navigation("TaskChecklist");

                    b.Navigation("TaskComments");

                    b.Navigation("TaskReminders");

                    b.Navigation("TaskTags");
                });

            modelBuilder.Entity("vws.web.Domain._task.Tag", b =>
                {
                    b.Navigation("TaskTags");
                });

            modelBuilder.Entity("vws.web.Domain._task.TaskCheckList", b =>
                {
                    b.Navigation("TaskCheckListItems");
                });

            modelBuilder.Entity("vws.web.Domain._task.TaskComment", b =>
                {
                    b.Navigation("Attachments");
                });

            modelBuilder.Entity("vws.web.Domain._task.TaskHistory", b =>
                {
                    b.Navigation("TaskHistoryParameters");
                });

            modelBuilder.Entity("vws.web.Domain._task.TaskReminder", b =>
                {
                    b.Navigation("TaskReminderLinkedUsers");
                });

            modelBuilder.Entity("vws.web.Domain._task.TaskScheduleType", b =>
                {
                    b.Navigation("GeneralTasks");
                });

            modelBuilder.Entity("vws.web.Domain._task.TimeTrack", b =>
                {
                    b.Navigation("TimeTrackPauses");
                });

            modelBuilder.Entity("vws.web.Domain._team.Team", b =>
                {
                    b.Navigation("Departments");

                    b.Navigation("Tasks");

                    b.Navigation("TaskStatuses");
                });

            modelBuilder.Entity("vws.web.Domain._team.TeamHistory", b =>
                {
                    b.Navigation("TeamHistoryParameters");
                });

            modelBuilder.Entity("vws.web.Domain._team.TeamType", b =>
                {
                    b.Navigation("Teams");
                });

            modelBuilder.Entity("vws.web.Domain._version.Version", b =>
                {
                    b.Navigation("VersionLogs");
                });
#pragma warning restore 612, 618
        }
    }
}
